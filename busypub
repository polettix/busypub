#!/usr/bin/env perl
use 5.024;
use Moo;
use warnings;
use experimental qw< postderef signatures >;
no warnings qw< experimental::postderef experimental::signatures >;

use Git::Wrapper;
use Try::Catch;
use POSIX 'strftime';
use Path::Tiny 'path';
use Log::Log4perl::Tiny qw< :easy >;
use MIME::Base64 'decode_base64';
use Time::Local 'timelocal';
use Mojo::UserAgent;
use MojoX::Twitter;
use Mojo::JSON 'decode_json';

has dir        => (is => 'ro', default => 'myblog');
has git        => (is => 'lazy');
has private    => (is => 'ro', required => 1);
has public     => (is => 'ro', required => 1);
has pubtime    => (is => 'ro', default => '07:00:00');
has recipients => (is => 'ro', default => sub { return [] });
has sleep_time => (is => 'ro', default => 10 * 60);            # 10 minutes
has ssh_config => (is => 'ro', default => undef);
has ssh_key    => (is => 'ro', init_arg => 'key');
has timezone   => (is => 'ro', default => undef);
has uri => (is => 'ro', init_arg => 'latest_uri', required => 1);

exit(
   sub (@args) {
      my %config;
      for my $key (
         qw<
         DIR
         KEY
         LATEST_URI
         PRIVATE
         PUBLIC
         PUBLISH_TIME
         RECIPIENTS
         SLEEP_TIME
         SSH_CONFIG
         TIMEZONE
         >
        )
      {
         $config{lc $key} = $ENV{$key} if defined $ENV{$key};
      } ## end for my $key (qw< DIR KEY...)
      $config{recipients} = decode_json($config{recipients})
        if exists $config{recipients};
      __PACKAGE__->new(\%config)->run;
   }
     ->(@ARGV)
) unless caller;

sub run ($self) {
   try {
      $self->ensure_ssh_setup if $self->ssh_key;
      $self->ensure_local_master();
      $ENV{TZ} = $self->timezone if defined $self->timezone;
   }
   catch {
      FATAL $_;
      exit 1;
   };

   my @recipients = $self->recipients->@*;
   INFO "notification recipients: ",
     join ', ', map { $_->{type} } @recipients;

   my $last_published = '';
   my $last_notified  = '';
   while ('necessary') {
      my $today = strftime '%Y-%m-%d', localtime;
      INFO "today is <$today>";

      my $sleep_time = 0;
      if ($today eq $last_notified) {    # nothing more to do today!
         $sleep_time = $self->time_to_tomorrow();
         INFO "publishing/notifications for <$today> done, sleeping...";
      }
      elsif ($today eq $last_published) {    # announce
         INFO "trying to get status for <$today>";
         my $last_notification;
         try {
            if (my $notification = $self->get_latest_notification) {
               $last_notification = $notification->{status}
                 if $notification->{date} eq $today;
            }
         } ## end try
         catch {
            ERROR "$_";
         };

         if (defined $last_notification) {
            INFO "sending out notifications for <$today>";
            for my $target (@recipients) {
               try {
                  INFO "--> to <$target->{type}>";
                  $self->send_notification($target, $last_notification);
               }
               catch {
                  ERROR "   failed <$target->{type}>: $_";
               };
            } ## end for my $target (@recipients)
            $last_notified     = $today;
            $last_notification = undef;                      # defensive...
            $sleep_time        = $self->time_to_tomorrow();
            INFO 'notifications sent';
         } ## end if (defined $last_notification)
         else {
            $sleep_time = 5;    # strict polling/notifying, just in case
            WARN "still no status update for <$today> available";
         }
      } ## end elsif ($today eq $last_published)
      else {                    # have to try publishing something
         $sleep_time = $self->sleep_time;
         try {
            INFO "attempting update for <$today>";

            # wipe out whatever we have cached and re-read from remotes
            $self->delete_tag($today);
            $self->refresh_local_copy;

            if ($self->has_tag($today)) {
               if ($self->public_contains($today)) {
                  $last_notified = $today;    # published, no notifications
                  INFO 'published already, assuming notified too';
               }
               else {
                  $self->advance_to_tag($today);
                  $self->update_public;
                  $last_notified = '';        # enable notifications
                  INFO 'update done';
               } ## end else [ if ($self->public_contains...)]
               $last_published = $today;      # whatever, this was done
               $sleep_time = 0;    # go to next step as soon as possible
            } ## end if ($self->has_tag($today...))
            else {
               ERROR "no tag for <$today> (yet...)";
            }
         } ## end try
         catch {
            ERROR $_;
         };
      } ## end else [ if ($today eq $last_notified)]
      sleep $sleep_time;
   } ## end while ('necessary')
} ## end sub run ($self)

sub send_notification ($self, $target, $status) {
   my $method = $self->can('send_notification_' . ($target->{type} // ''))
     or die "unsupported type <$target->{type}> for notifications";
   $self->$method($target, $status);
}

sub send_notification_mastodon ($self, $cfg, $status) {
   my $uri   = $cfg->{uri} // 'https://octodon.social/api/v1/statuses';
   my $token = $cfg->{token} // die 'invalid token for mastodon';
   my $visibility = $cfg->{visibility} // 'public';
   return Mojo::UserAgent->new->post(
      $uri,
      {Authorization => "Bearer $token"},
      form => {
         status     => $status,
         visibility => $visibility,
      },
   )->res->json;
} ## end sub send_notification_mastodon

sub send_notification_twitter ($self, $cfg, $status) {
   my $api_key        = $cfg->{api_key}        or die 'no API key';
   my $api_secret_key = $cfg->{api_secret_key} or die 'no API secret key';
   my $access_token   = $cfg->{access_token}   or die 'no access token';
   my $access_token_secret = $cfg->{access_token_secret}
     or die 'no access token secret';
   my $ua = MojoX::Twitter->new(
      access_token        => $access_token,
      access_token_secret => $access_token_secret,
      consumer_key        => $api_key,
      consumer_secret     => $api_secret_key,
   );
   return $ua->request(
      POST => 'statuses/update',
      {
         status => $status,
      }
   );
} ## end sub send_notification_twitter

sub get_latest_notification ($self) {
   my $uri = $self->uri;
   my $res = Mojo::UserAgent->new(max_redirect => 5)->get($uri)->result;
   die "error getting ($uri): " . $res->message
     unless $res->is_success;
   (my $body = $res->body) =~ s{\A\s+|\s+\z}{}gmxs;
   my ($date, $status) = split m{\n}mxs, $body, 2;
   return {
      date   => $date,
      status => $status,
   };
} ## end sub get_latest_notification ($self)

sub time_to_tomorrow ($self) {
   my @bod = localtime;
   @bod[2, 1, 0] =
     map { $_ + 0 } (split(m{:}mxs, $self->pubtime), (0) x 3);
   return 24 * 60 * 60 - (time - timelocal(@bod)) + 2;
} ## end sub time_to_tomorrow ($self)

sub public_contains ($self, $ref) {
   for ($self->git->branch('-a', '--contains', $ref)) {
      my $branch = substr $_, 2;
      return 1 if $branch eq 'remotes/public/master';
   }
   return 0;
} ## end sub public_contains

sub commit_hash_for ($self, $r) { ($self->git->rev_parse($r))[0] }

sub _build_git ($self) { return Git::Wrapper->new($self->dir) }

sub ensure_ssh_setup ($self) {
   my $ssh_dir = path("$ENV{HOME}/.ssh");
   $ssh_dir->mkpath;
   $ssh_dir->chmod(0700);

   my $ssh_key = $ssh_dir->child('id_rsa-busypub');
   $ssh_key->spew_utf8(decode_base64($self->ssh_key));
   $ssh_key->chmod(0600);

   my $ssh_config = $ssh_dir->child('config');
   my $ssh_config_content =
       defined($self->ssh_config) ? decode_base64($self->ssh_config)
     : $ssh_config->exists        ? undef
     : <<'END'
Host *
   StrictHostKeyChecking no
   UserKnownHostsFile /dev/null
   IdentityFile ~/.ssh/id_rsa-busypub
END
     ;
   if (defined $ssh_config_content) {
      $ssh_config->spew_utf8($ssh_config_content);
      $ssh_config->chmod(0600);
   }

   return;
} ## end sub ensure_ssh_setup ($self)

sub ensure_local_master ($self) {
   try {
      $self->git->checkout('master');
   }
   catch {
      $self->reset_local_copy;
      $self->git->checkout(qw< -b master public/master >);
   };
} ## end sub ensure_local_master ($self)

sub reset_local_copy ($self) {
   my $dir = $self->dir;
   my $git = $self->git;
   path($dir)->remove_tree({safe => 0});
   INFO "cloning private repo into $dir";
   $git->clone(qw< -o private >, $self->private, $dir);
   INFO 'fetching public repo';
   $git->remote(add => public => $self->public);
   $git->fetch('public');
   return;
} ## end sub reset_local_copy ($self)

sub refresh_local_copy ($self) {
   my $git = $self->git;
   INFO 'fetching public repo';
   $git->fetch(qw< public        >);
   INFO 'fetching private repo';
   $git->fetch(qw< private --tag >);
} ## end sub refresh_local_copy ($self)

sub has_tag ($s, $t) {
   scalar grep { $t eq $_ } $s->git->tag;
}

sub delete_tag ($self, $tag) {
   return unless $self->has_tag($tag);
   $self->git->tag(-d => $tag);
}

sub advance_to_tag ($s, $t) { $s->git->merge('--ff-only' => $t) }

sub update_public ($s) { $s->git->push(public => 'master') }
